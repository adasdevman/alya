import logging
import json
import re
from datetime import datetime, timedelta
from ..exceptions import NetworkError, AITimeoutError

logger = logging.getLogger(__name__)

class QuickBooksHandler:
    """Gestionnaire pour les int√©grations QuickBooks"""
    
    def __init__(self, orchestrator):
        self.orchestrator = orchestrator
        self.user = orchestrator.user
        self.openai_client = orchestrator.openai_client
        self.conversation_state = None
        self.finance_info = {}
        self.quickbooks_integration = None
        self._initialize()
    
    def _initialize(self):
        """Initialise l'int√©gration QuickBooks si elle existe"""
        from alyawebapp.models import Integration, UserIntegration
        
        try:
            integration = Integration.objects.get(name__iexact='quickbooks')
            self.quickbooks_integration = UserIntegration.objects.get(
                user=self.user,
                integration=integration,
                enabled=True
            )
        except (Integration.DoesNotExist, UserIntegration.DoesNotExist):
            self.quickbooks_integration = None
    
    def handle_request(self, text):
        """G√®re les requ√™tes li√©es √† QuickBooks"""
        try:
            if not self.quickbooks_integration:
                return "Vous n'avez pas install√© cette int√©gration."
            
            # D√©tecter les intentions de l'utilisateur
            text_lower = text.lower()
            
            # Intention d'obtenir un r√©sum√© financier
            if any(phrase in text_lower for phrase in ["r√©sum√© financier", "situation financi√®re", "bilan financier"]):
                period_match = None
                if "mois" in text_lower:
                    period_match = "month"
                elif "trimestre" in text_lower:
                    period_match = "quarter"
                elif "ann√©e" in text_lower or "annuel" in text_lower:
                    period_match = "year"
                
                return self._get_financial_summary(period_match or "month")
            
            # Intention de voir les cat√©gories de d√©penses
            if any(phrase in text_lower for phrase in ["cat√©gories de d√©penses", "d√©penses par cat√©gorie", "r√©partition des d√©penses"]):
                return self._get_expense_categories()
            
            # Intention d'analyser le flux de tr√©sorerie
            if any(phrase in text_lower for phrase in ["flux de tr√©sorerie", "cash flow", "liquidit√©s"]):
                days_match = re.search(r'(\d+)\s*jours', text_lower)
                days = int(days_match.group(1)) if days_match else 30
                return self._get_cash_flow(days)
            
            # Intention de voir les factures impay√©es
            if any(phrase in text_lower for phrase in ["factures impay√©es", "comptes clients", "cr√©ances"]):
                return self._get_accounts_receivable()
            
            return "Je peux vous aider avec QuickBooks. Voici ce que je peux faire :\n" + \
                   "- Obtenir un r√©sum√© financier (mensuel, trimestriel ou annuel)\n" + \
                   "- Afficher les cat√©gories de d√©penses\n" + \
                   "- Analyser le flux de tr√©sorerie\n" + \
                   "- Consulter les factures impay√©es"

        except Exception as e:
            logger.error(f"Erreur QuickBooks: {str(e)}")
            self.conversation_state = None  # R√©initialiser l'√©tat en cas d'erreur
            return "Une erreur est survenue lors de l'ex√©cution de votre demande. Veuillez r√©essayer."
    
    def _get_financial_summary(self, period):
        """R√©cup√®re un r√©sum√© financier en utilisant l'int√©gration QuickBooks existante"""
        from alyawebapp.integrations.quickbooks.handler import QuickBooksHandler as QuickBooksAPI
        
        try:
            # Utiliser l'impl√©mentation existante
            qb_handler = QuickBooksAPI(self.quickbooks_integration.config)
            summary = qb_handler.get_financial_summary(period)
            
            # Formater le r√©sum√© pour l'affichage
            period_labels = {
                "month": "mensuel",
                "quarter": "trimestriel",
                "year": "annuel"
            }
            
            response = f"üìä R√©sum√© financier {period_labels.get(period, 'mensuel')} ({summary['start_date']} √† {summary['end_date']}) :\n\n"
            response += f"‚Ä¢ Revenus : {summary['revenue']:.2f} ‚Ç¨\n"
            response += f"‚Ä¢ D√©penses : {summary['expenses']:.2f} ‚Ç¨\n"
            response += f"‚Ä¢ B√©n√©fice/Perte : {summary['profit']:.2f} ‚Ç¨\n"
            
            if summary['profit'] > 0:
                response += "\n‚úÖ Bilan positif pour cette p√©riode !"
            else:
                response += "\n‚ö†Ô∏è Bilan n√©gatif pour cette p√©riode."
            
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration du r√©sum√© financier: {str(e)}")
            return "D√©sol√©, je n'ai pas pu r√©cup√©rer le r√©sum√© financier. Veuillez v√©rifier que votre int√©gration QuickBooks est correctement configur√©e."
    
    def _get_expense_categories(self):
        """R√©cup√®re les cat√©gories de d√©penses en utilisant l'int√©gration QuickBooks existante"""
        from alyawebapp.integrations.quickbooks.handler import QuickBooksHandler as QuickBooksAPI
        
        try:
            # Utiliser l'impl√©mentation existante
            qb_handler = QuickBooksAPI(self.quickbooks_integration.config)
            categories = qb_handler.get_expense_categories()
            
            if not categories:
                return "Aucune d√©pense enregistr√©e pour le mois en cours."
            
            # Calculer le total des d√©penses
            total_expenses = sum(cat['amount'] for cat in categories)
            
            # Formater les cat√©gories pour l'affichage
            response = "üìä R√©partition des d√©penses du mois :\n\n"
            for i, cat in enumerate(categories, 1):
                percentage = (cat['amount'] / total_expenses) * 100
                response += f"‚Ä¢ {cat['category']} : {cat['amount']:.2f} ‚Ç¨ ({percentage:.1f}%)\n"
            
            response += f"\nTotal des d√©penses : {total_expenses:.2f} ‚Ç¨"
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des cat√©gories de d√©penses: {str(e)}")
            return "D√©sol√©, je n'ai pas pu r√©cup√©rer les cat√©gories de d√©penses. Veuillez v√©rifier que votre int√©gration QuickBooks est correctement configur√©e."
    
    def _get_cash_flow(self, days):
        """Analyse le flux de tr√©sorerie en utilisant l'int√©gration QuickBooks existante"""
        from alyawebapp.integrations.quickbooks.handler import QuickBooksHandler as QuickBooksAPI
        
        try:
            # Utiliser l'impl√©mentation existante
            qb_handler = QuickBooksAPI(self.quickbooks_integration.config)
            cash_flow = qb_handler.get_cash_flow(days)
            
            # Formater le flux de tr√©sorerie pour l'affichage
            response = f"üí∞ Analyse du flux de tr√©sorerie (derniers {days} jours) :\n\n"
            response += f"‚Ä¢ Entr√©es : {cash_flow['cash_inflow']:.2f} ‚Ç¨\n"
            response += f"‚Ä¢ Sorties : {cash_flow['cash_outflow']:.2f} ‚Ç¨\n"
            response += f"‚Ä¢ Flux net : {cash_flow['net_cash_flow']:.2f} ‚Ç¨\n\n"
            
            if cash_flow['net_cash_flow'] > 0:
                response += "‚úÖ Votre flux de tr√©sorerie est positif sur cette p√©riode."
            else:
                response += "‚ö†Ô∏è Votre flux de tr√©sorerie est n√©gatif sur cette p√©riode."
            
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de l'analyse du flux de tr√©sorerie: {str(e)}")
            return "D√©sol√©, je n'ai pas pu analyser le flux de tr√©sorerie. Veuillez v√©rifier que votre int√©gration QuickBooks est correctement configur√©e."
    
    def _get_accounts_receivable(self):
        """R√©cup√®re les factures impay√©es en utilisant l'int√©gration QuickBooks existante"""
        from alyawebapp.integrations.quickbooks.handler import QuickBooksHandler as QuickBooksAPI
        
        try:
            # Utiliser l'impl√©mentation existante
            qb_handler = QuickBooksAPI(self.quickbooks_integration.config)
            receivables = qb_handler.get_accounts_receivable()
            
            if not receivables:
                return "Aucune facture impay√©e actuellement. ‚úÖ"
            
            # Calculer le total des cr√©ances
            total_receivable = sum(inv['balance'] for inv in receivables)
            overdue_receivable = sum(inv['balance'] for inv in receivables if inv['days_overdue'] > 0)
            
            # Formater les factures pour l'affichage
            response = "üìë Factures impay√©es :\n\n"
            
            # D'abord les factures en retard
            overdue = [inv for inv in receivables if inv['days_overdue'] > 0]
            if overdue:
                response += "‚ö†Ô∏è FACTURES EN RETARD :\n"
                for inv in overdue:
                    response += f"‚Ä¢ {inv['customer']} : {inv['balance']:.2f} ‚Ç¨ (retard de {inv['days_overdue']} jours)\n"
                response += "\n"
            
            # Ensuite les factures √† venir
            upcoming = [inv for inv in receivables if inv['days_overdue'] <= 0]
            if upcoming:
                response += "FACTURES √Ä √âCH√âANCE :\n"
                for inv in upcoming:
                    response += f"‚Ä¢ {inv['customer']} : {inv['balance']:.2f} ‚Ç¨ (√©ch√©ance : {inv['due_date']})\n"
            
            response += f"\nTotal √† recevoir : {total_receivable:.2f} ‚Ç¨"
            if overdue_receivable > 0:
                response += f" dont {overdue_receivable:.2f} ‚Ç¨ en retard"
            
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des factures impay√©es: {str(e)}")
            return "D√©sol√©, je n'ai pas pu r√©cup√©rer les factures impay√©es. Veuillez v√©rifier que votre int√©gration QuickBooks est correctement configur√©e." 